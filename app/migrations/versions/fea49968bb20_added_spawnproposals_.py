"""Added: SpawnProposals, SpawnChangeProposals, and Notifications; along with a few association tables for voting, sponsoring, and favouriting

Revision ID: fea49968bb20
Revises: a8f65d8ccb2f
Create Date: 2025-06-05 14:43:18.458035

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fea49968bb20'
down_revision: Union[str, None] = 'a8f65d8ccb2f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('spawn_proposals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('world_id', sa.Integer(), nullable=False),
    sa.Column('min_level', sa.Integer(), nullable=True),
    sa.Column('max_level', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'EXPIRED', name='proposalstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('spawn_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['spawn_id'], ['spawns.id'], ),
    sa.ForeignKeyConstraint(['world_id'], ['worlds.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spawn_proposals_name'), 'spawn_proposals', ['name'], unique=True)
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('message', sa.String(length=500), nullable=True),
    sa.Column('notification_type', sa.Enum('PROPOSAL_STATUS', 'RECOVERY_TOKEN_EXPIRY', 'FAVOURITE_SPAWN_PROPOSAL', 'GENERAL', name='notificationtype'), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('related_entity_id', sa.Integer(), nullable=True),
    sa.Column('related_entity_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spawn_change_proposals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('new_locking_period', sa.Integer(), nullable=False),
    sa.Column('new_claim_time_min', sa.Integer(), nullable=False),
    sa.Column('new_claim_time_max', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'EXPIRED', name='proposalstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('spawn_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('(start_time IS NULL AND end_time IS NULL) OR (start_time IS NOT NULL AND end_time IS NOT NULL AND end_time > start_time)', name='_spawn_change_proposal_time_constraint'),
    sa.ForeignKeyConstraint(['spawn_id'], ['spawns.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spawn_proposal_sponsors',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('spawn_proposal_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['spawn_proposal_id'], ['spawn_proposals.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'spawn_proposal_id')
    )
    op.create_table('user_spawn_favorites',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('spawn_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['spawn_id'], ['spawns.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'spawn_id')
    )
    op.create_table('spawn_change_proposal_votes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('spawn_change_proposal_id', sa.Integer(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetype'), nullable=True),
    sa.ForeignKeyConstraint(['spawn_change_proposal_id'], ['spawn_change_proposals.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'spawn_change_proposal_id')
    )
    op.drop_constraint('characters_name_key', 'characters', type_='unique')
    op.create_unique_constraint('_name_user_id_uc', 'characters', ['name', 'user_id'])
    op.add_column('spawns', sa.Column('proposal_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'spawns', 'spawn_proposals', ['proposal_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'spawns', type_='foreignkey')
    op.drop_column('spawns', 'proposal_id')
    op.drop_constraint('_name_user_id_uc', 'characters', type_='unique')
    op.create_unique_constraint('characters_name_key', 'characters', ['name'])
    op.drop_table('spawn_change_proposal_votes')
    op.drop_table('user_spawn_favorites')
    op.drop_table('spawn_proposal_sponsors')
    op.drop_table('spawn_change_proposals')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_spawn_proposals_name'), table_name='spawn_proposals')
    op.drop_table('spawn_proposals')
    # ### end Alembic commands ###
