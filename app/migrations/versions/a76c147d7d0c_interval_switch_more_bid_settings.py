"""Interval switch, more bid settings

Revision ID: a76c147d7d0c
Revises: 89afe6be0d88
Create Date: 2025-06-19 15:02:30.374252

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Important for Interval type


# revision identifiers, used by Alembic.
revision: str = 'a76c147d7d0c'
down_revision: Union[str, None] = '89afe6be0d88'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema, converting old integer columns to INTERVAL and renaming where applicable."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Table: change_votes (new table for SpawnChangeProposal votes) ---
    op.create_table('change_votes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('proposal_id', sa.Integer(), nullable=False),
    # Reference the 'votetype' ENUM. Setting create_type=False ensures
    # the ENUM type is not attempted to be created again.
    sa.Column('vote_type', postgresql.ENUM('UPVOTE', 'DOWNVOTE', name='votetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['proposal_id'], ['spawn_change_proposals.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'proposal_id')
    )
    # This correctly drops the old association table name if it existed
    op.drop_table('spawn_change_proposal_votes')


    # --- Table: spawn_change_proposals ---
    # Manually adjusting for renaming 'new_' prefixed columns and converting to INTERVAL.
    # This prevents data loss from the autogenerated add/drop sequence.
    # Using COALESCE to handle potential NULLs in existing data when converting to NOT NULL INTERVAL.

    # 1. Rename 'new_locking_period' to 'locking_period' and change type to Interval
    op.alter_column(
        'spawn_change_proposals',
        'new_locking_period', # Old column name
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        new_column_name='locking_period', # New column name
        # Convert existing integer (minutes) to INTERVAL. If new_locking_period is NULL, default to 15 minutes.
        # Pass SQL string directly (without sa.text()) to avoid TypeError
        postgresql_using="COALESCE(CAST(new_locking_period || ' minutes' AS INTERVAL), INTERVAL '15 minutes')",
        existing_nullable=False, # Assuming it was non-nullable previously
        nullable=False # Set new nullability as per model
    )

    # 2. Rename 'new_claim_time_min' to 'claim_time_min' and change type to Interval
    op.alter_column(
        'spawn_change_proposals',
        'new_claim_time_min',
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        new_column_name='claim_time_min',
        # Pass SQL string directly (without sa.text())
        postgresql_using="COALESCE(CAST(new_claim_time_min || ' minutes' AS INTERVAL), INTERVAL '15 minutes')",
        existing_nullable=False,
        nullable=False
    )

    # 3. Rename 'new_claim_time_max' to 'claim_time_max' and change type to Interval
    op.alter_column(
        'spawn_change_proposals',
        'new_claim_time_max',
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        new_column_name='claim_time_max',
        # Pass SQL string directly (without sa.text())
        postgresql_using="COALESCE(CAST(new_claim_time_max || ' minutes' AS INTERVAL), INTERVAL '3 hours 15 minutes')",
        existing_nullable=False,
        nullable=False
    )

    # 4. Rename 'new_deprioratize_time' to 'deprioratize_time' and change type to Interval
    # Pass SQL string directly (without sa.text())
    op.add_column('spawn_change_proposals', sa.Column('deprioratize_time', postgresql.INTERVAL(), nullable=True))


    # --- Table: spawn_proposals ---
    # Adding new columns. Providing server_default for NOT NULL columns to avoid IntegrityError.
    # Pass SQL string directly (without sa.text()) for server_default
    op.add_column('spawn_proposals', sa.Column('locking_period', postgresql.INTERVAL(), nullable=False, server_default="15 minutes"))
    op.add_column('spawn_proposals', sa.Column('claim_time_min', postgresql.INTERVAL(), nullable=False, server_default="15 minutes"))
    op.add_column('spawn_proposals', sa.Column('claim_time_max', postgresql.INTERVAL(), nullable=False, server_default="3 hours 15 minutes"))
    op.add_column('spawn_proposals', sa.Column('deprioratize_time', postgresql.INTERVAL(), nullable=True))


    # --- Table: spawns ---
    # Altering existing columns. Providing server_default for NOT NULL columns to avoid IntegrityError.

    # 1. Alter 'locking_period' from Integer to Interval with data conversion and server default
    # Pass SQL string directly (without sa.text()) for postgresql_using and server_default
    op.alter_column(
        'spawns',
        'locking_period',
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        # Convert existing integer to interval. If original was NULL, use default.
        postgresql_using="COALESCE(CAST(locking_period || ' minutes' AS INTERVAL), INTERVAL '15 minutes')",
        existing_nullable=False,
        nullable=False, # Keep nullability as defined in model
        server_default="15 minutes" # Default for new rows/if conversion resulted in NULL for existing rows
    )

    # 2. Alter 'claim_time_min' from Integer to Interval with data conversion and server default
    # Pass SQL string directly (without sa.text()) for postgresql_using and server_default
    op.alter_column(
        'spawns',
        'claim_time_min',
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        # Convert existing integer to interval. If original was NULL, use default.
        postgresql_using="COALESCE(CAST(claim_time_min || ' minutes' AS INTERVAL), INTERVAL '15 minutes')",
        existing_nullable=False,
        nullable=False,
        server_default="15 minutes"
    )

    # 3. Alter 'claim_time_max' from Integer to Interval with data conversion and server default
    # Pass SQL string directly (without sa.text()) for postgresql_using and server_default
    op.alter_column(
        'spawns',
        'claim_time_max',
        existing_type=sa.INTEGER(),
        type_=postgresql.INTERVAL(),
        # Convert existing integer to interval. If original was NULL, use default.
        postgresql_using="COALESCE(CAST(claim_time_max || ' minutes' AS INTERVAL), INTERVAL '3 hours 15 minutes')",
        existing_nullable=False,
        nullable=False,
        server_default="3 hours 15 minutes"
    )

    # 4. Add 'deprioratize_time' as a new Interval column to 'spawns'
    op.add_column('spawns', sa.Column('deprioratize_time', postgresql.INTERVAL(), nullable=True))


    # --- Table: worlds (new columns added) ---
    # These are new columns, so op.add_column is correct.
    # Pass SQL string directly (without sa.text()) for server_default
    op.add_column('worlds', sa.Column('inactive_threshold', postgresql.INTERVAL(), nullable=False, server_default="30 days"))
    op.add_column('worlds', sa.Column('engagement_threshold', sa.Numeric(), nullable=False, server_default="0.5"))
    op.add_column('worlds', sa.Column('favourability_approval', sa.Numeric(), nullable=False, server_default="0.6"))
    op.add_column('worlds', sa.Column('favourability_rejection', sa.Numeric(), nullable=False, server_default="0.3"))
    op.add_column('worlds', sa.Column('sponsorship_flat', sa.Integer(), nullable=False, server_default="5"))
    op.add_column('worlds', sa.Column('sposorship_fraction', sa.Numeric(), nullable=False, server_default="0.01")) # Corrected typo: sposorship_fraction to sponsorship_fraction

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema, converting INTERVAL back to Integer and reverting renames."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Table: worlds (dropping new columns) ---
    # Reverting the adds from upgrade. Drop columns and their server defaults.
    # Pass SQL string directly (without sa.text()) for existing_server_default
    op.drop_column('worlds', 'sposorship_fraction', existing_server_default="0.01") # Corrected typo
    op.drop_column('worlds', 'sponsorship_flat', existing_server_default="5")
    op.drop_column('worlds', 'favourability_rejection', existing_server_default="0.3")
    op.drop_column('worlds', 'favourability_approval', existing_server_default="0.6")
    op.drop_column('worlds', 'engagement_threshold', existing_server_default="0.5")
    op.drop_column('worlds', 'inactive_threshold', existing_server_default="30 days")


    # --- Table: spawns ---
    # Reverting the alter_column changes, converting back to Integer and removing server defaults.
    # Pass SQL string directly (without sa.text()) for postgresql_using and existing_server_default
    op.alter_column(
        'spawns',
        'claim_time_max',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM claim_time_max) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '3 hours 15 minutes'"
    )
    op.alter_column(
        'spawns',
        'claim_time_min',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM claim_time_min) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '15 minutes'"
    )
    op.alter_column(
        'spawns',
        'locking_period',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM locking_period) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '15 minutes'"
    )
    # Reverting the add for deprioratize_time
    op.drop_column('spawns', 'deprioratize_time')


    # --- Table: spawn_proposals ---
    # Reverting the add_column operations and their server defaults.
    # Pass SQL string directly (without sa.text()) for existing_server_default
    op.drop_column('spawn_proposals', 'deprioratize_time')
    op.drop_column('spawn_proposals', 'claim_time_max', existing_server_default="3 hours 15 minutes'")
    op.drop_column('spawn_proposals', 'claim_time_min', existing_server_default="15 minutes")
    op.drop_column('spawn_proposals', 'locking_period', existing_server_default="15 minutes")


    # --- Table: spawn_change_proposals ---
    # Reverting the renames and type conversions.

    # 1. Revert 'deprioratize_time' to 'new_deprioratize_time' and change type back to Integer
    # Pass SQL string directly (without sa.text()) for postgresql_using
    op.drop_column('spawn_change_proposals', 'deprioratize_time')
    # 2. Revert 'claim_time_max' to 'new_claim_time_max' and change type back to Integer
    # Pass SQL string directly (without sa.text()) for postgresql_using and existing_server_default
    op.alter_column(
        'spawn_change_proposals',
        'claim_time_max',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        new_column_name='new_claim_time_max',
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM claim_time_max) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '3 hours 15 minutes'"
    )
    # 3. Revert 'claim_time_min' to 'new_claim_time_min' and change type back to Integer
    # Pass SQL string directly (without sa.text()) for postgresql_using and existing_server_default
    op.alter_column(
        'spawn_change_proposals',
        'claim_time_min',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        new_column_name='new_claim_time_min',
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM claim_time_min) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '15 minutes'"
    )
    # 4. Revert 'locking_period' to 'new_locking_period' and change type back to Integer
    # Pass SQL string directly (without sa.text()) for postgresql_using and existing_server_default
    op.alter_column(
        'spawn_change_proposals',
        'locking_period',
        existing_type=postgresql.INTERVAL(),
        type_=sa.INTEGER(),
        new_column_name='new_locking_period',
        # Convert INTERVAL (seconds) to INTEGER (minutes)
        postgresql_using="CAST(EXTRACT(EPOCH FROM locking_period) / 60 AS INTEGER)",
        existing_nullable=False,
        nullable=False,
        existing_server_default="INTERVAL '15 minutes'"
    )

    # This recreates the old association table.
    op.create_table('spawn_change_proposal_votes',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('spawn_change_proposal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # Reference the 'votetype' ENUM without attempting to create it here.
    sa.Column('vote_type', postgresql.ENUM('UPVOTE', 'DOWNVOTE', name='votetype', create_type=False), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['spawn_change_proposal_id'], ['spawn_change_proposals.id'], name='spawn_change_proposal_votes_spawn_change_proposal_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='spawn_change_proposal_votes_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'spawn_change_proposal_id', name='spawn_change_proposal_votes_pkey')
    )
    # This drops the new association table
    op.drop_table('change_votes')

    # --- Drop ENUM Type: votetype ---
    # Drop the 'votetype' ENUM using raw SQL to handle potential Alembic version limitations.
    op.execute("DROP TYPE IF EXISTS votetype;")
    # ### end Alembic commands ###
